<?xml version="1.0" encoding="UTF-8"?>
<launch>
  <arg name="mav_name" default="firefly"/>
  <arg name="namespace" default="$(arg mav_name)"/>
  <arg name="enable_logging" default="false" />
  <arg name="world_name" default="flat"/>
  <arg name="enable_ground_truth" default="true" />
  <arg name="log_file" default="$(arg mav_name)" />
  <arg name="waypoint_x" value="0.0" />
  <arg name="waypoint_y" value="0.0" />
  <arg name="waypoint_z" value="1.5" />
  <arg name="param_file" default="$(find interface_nbvp_rotors)/resource/exploration.yaml" />

  <arg name="stl_file_path" default="" />
  <arg name="mesh_resolution" default="1.0" />
  <arg name="resolution" default="0.4" />
  <arg name="visualize_max_z" default="999" />
  <arg name="sensor_max_range" default="5.0" />
  <arg name="peer_vehicle_pose_topic_1" default="peer_pose_1" />
  <arg name="peer_vehicle_pose_topic_2" default="peer_pose_2" />
  <arg name="peer_vehicle_pose_topic_3" default="peer_pose_3" />

  <arg name="world_frame" default="world" />
  <arg name="odometry_topic" default="/$(arg mav_name)/ground_truth/odometry" />
  <arg name="pose_topic" default="/$(arg mav_name)/ground_truth/pose_with_covariance" />
  <arg name="point_cloud_topic" default="/$(arg mav_name)/vi_sensor/camera_depth/depth/points" />

  <rosparam file="$(find mav_startup)/parameters/capabilities.yaml"/>

  <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models"/>
  <!-- :$(find interface_nbvp_rotors)/worlds -->
  <env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models"/>

  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find interface_nbvp_rotors)/worlds/$(arg world_name).world" />
    <!-- <arg name="world_name" value="$(find rotors_gazebo)/worlds/$(arg world_name).world" /> -->
    <arg name="paused" value="true"/>
  </include>

  <group ns="$(arg mav_name)" >

    <!-- Static TFs -->
    <node pkg="tf" type="static_transform_publisher" name="world_to_global" args="0 0 0 0 0 0 1 /global /world 100">
      <param name="capability_group" value="TF" />
    </node>
    <node pkg="tf" type="static_transform_publisher" name="world_tf_broadcaster" args="0 0 0 0 0 0 1 world odom 100">
      <param name="capability_group" value="TF" />
    </node>

    <!-- Simulation -->
    <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="model" value="$(find rotors_description)/urdf/mav_with_vi_sensor.gazebo" />
      <arg name="enable_logging" value="$(arg enable_logging)" />
      <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      <arg name="log_file" value="$(arg log_file)"/>
    </include>
    <node name="hovering_example" pkg="rotors_gazebo" type="hovering_example" output="screen">
      <param name="capability_group" value="Simulation" />
      <param name="x" value="$(arg waypoint_x)" />
      <param name="y" value="$(arg waypoint_y)" />
      <param name="z" value="$(arg waypoint_z)" />
    </node>
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" >
      <param name="capability_group" value="Simulation" />
    </node>
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" >
      <param name="capability_group" value="Simulation" />
    </node>

    <!-- Control -->
    <node name="PID_attitude_controller" pkg="mav_lowlevel_attitude_controller" type="mav_pid_attitude_controller_node" respawn="true" clear_params="true" output="screen">
      <remap from="odometry" to="$(arg odometry_topic)" />
      <rosparam file="$(find mav_lowlevel_attitude_controller)/resources/PID_attitude_$(arg mav_name).yaml" />
      <param name="capability_group" value="Control" />
    </node>
    <node name="mav_linear_mpc" pkg="mav_linear_mpc" type="mav_linear_mpc_node" respawn="true" clear_params="true" output="screen">
      <remap from="odometry" to="$(arg odometry_topic)" />
      <rosparam file="$(find mav_linear_mpc)/resources/linear_mpc_$(arg mav_name).yaml" />
      <rosparam file="$(find mav_disturbance_observer)/resources/disturbance_observer_$(arg mav_name).yaml"/>
      <param name="verbose" value="true" />
      <param name="use_rc_teleop" value="false" />
      <param name="reference_frame" value="world" />
      <param name="capability_group" value="Control" />
    </node>

    <!-- Exploration -->
    <node name="nbvPlanner" pkg="nbvplanner" type="nbvPlanner" output="screen">
      <param name="tf_frame" type="string" value="$(arg world_frame)" />
      <param name="resolution" type="double" value="$(arg resolution)" />
      <param name="visualize_max_z" type="double" value="$(arg visualize_max_z)" />
      <param name="sensor_max_range" type="double" value="$(arg sensor_max_range)" />
      <param name="stl_file_path" type="string" value="$(arg stl_file_path)" />
      <param name="mesh_resolution" type="double" value="$(arg mesh_resolution)" />
      <param name="map_publish_frequency" type="double" value="1.0" />
      <remap from="cam0/camera_info" to="/$(arg mav_name)/vi_sensor/left/camera_info"/>
      <remap from="cam1/camera_info" to="/$(arg mav_name)/vi_sensor/right/camera_info"/>
      <remap from="pointcloud_throttled" to="/$(arg point_cloud_topic)"/>
      <remap from="pose" to="$(arg pose_topic)"/>
      <remap from="nbvplanner" to="/$(arg mav_name)/nbvplanner"/>
      <remap from="peer_pose_1" to="$(arg peer_vehicle_pose_topic_1)"/>
      <remap from="peer_pose_2" to="$(arg peer_vehicle_pose_topic_2)"/>
      <remap from="peer_pose_3" to="$(arg peer_vehicle_pose_topic_3)"/>

      <rosparam command="load" file="$(arg param_file)" />

      <param name="capability_group" value="Exploration" />
    </node>

    <node name="exploration" pkg="interface_nbvp_rotors" type="exploration" output="screen" >

      <rosparam command="load" file="$(arg param_file)" />

      <param name="capability_group" value="Exploration" />
    </node>

  </group>
</launch>
